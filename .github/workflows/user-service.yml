name: User Service CI

on:
  push:
    paths:
      - 'services/user-service/**'
      - '.github/workflows/user-service.yml'
  pull_request:
    paths:
      - 'services/user-service/**'
      - '.github/workflows/user-service.yml'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Verify .env File
        run: |
          ls services/user-service/.env || echo ".env file is missing"

      - name: Create .env File
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/user_service" > services/user-service/.env
          echo "DATABASE_NAME=user_service" >> services/user-service/.env
          echo "DATABASE_USER=postgres" >> services/user-service/.env
          echo "DATABASE_PASSWORD=postgres" >> services/user-service/.env
          echo "DATABASE_HOST=localhost" >> services/user-service/.env
          echo "DATABASE_PORT=5432" >> services/user-service/.env
          echo "SERVER_PORT=8000" >> services/user-service/.env
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> services/user-service/.env
          cat services/user-service/.env

      - name: Set environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/user_service" >> $GITHUB_ENV
          echo "DATABASE_NAME=user_service" >> $GITHUB_ENV
          echo "DATABASE_USER=postgres" >> $GITHUB_ENV
          echo "DATABASE_PASSWORD=postgres" >> $GITHUB_ENV
          echo "DATABASE_HOST=localhost" >> $GITHUB_ENV
          echo "DATABASE_PORT=5432" >> $GITHUB_ENV
          echo "SERVER_PORT=8000" >> $GITHUB_ENV
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> $GITHUB_ENV

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Set up Docker Compose
        run: |
          cd services/user-service
          docker-compose up -d

      - name: Check Docker Compose
        run: |
          cd services/user-service
          docker ps
          docker-compose logs user-db

      # - name: Wait for Database
      #   run: |
      #     cd services/user-service
      #     docker-compose exec user-db pg_isready -U postgres

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd services/user-service
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      # - name: Run code formatting check (black)
      #   run: |
      #     cd services/user-service
      #     black . --check

      # - name: Run import sorting check (isort)
      #   run: |
      #     cd services/user-service
      #     isort . --check-only

      # - name: Run linting (flake8)
      #   run: |
      #     cd services/user-service
      #     flake8 .

      # - name: Run type checking (mypy)
      #   run: |
      #     cd services/user-service
      #     mypy . --config-file ./mypy.ini

      - name: Run tests with coverage
        run: |
          cd services/user-service
          export PYTHONPATH=$(pwd)
          pytest --cov=. --cov-report=term-missing

      - name: Tear down Docker Compose
        if: always()
        run: |
          cd services/user-service
          docker-compose down
